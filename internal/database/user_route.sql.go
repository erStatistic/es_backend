// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_route.sql

package database

import (
	"context"
)

const createUserRoute = `-- name: CreateUserRoute :one
INSERT INTO
    user_routes (route_id, title, weapon_id, character_id, count)
VALUES
    ($1, $2, $3, $4, $5)
RETURNING
    id, route_id, title, weapon_id, character_id, count, created_at, updated_at
`

type CreateUserRouteParams struct {
	RouteID     int32  `json:"route_id"`
	Title       string `json:"title"`
	WeaponID    int32  `json:"weapon_id"`
	CharacterID int32  `json:"character_id"`
	Count       int32  `json:"count"`
}

func (q *Queries) CreateUserRoute(ctx context.Context, arg CreateUserRouteParams) (UserRoute, error) {
	row := q.db.QueryRow(ctx, createUserRoute,
		arg.RouteID,
		arg.Title,
		arg.WeaponID,
		arg.CharacterID,
		arg.Count,
	)
	var i UserRoute
	err := row.Scan(
		&i.ID,
		&i.RouteID,
		&i.Title,
		&i.WeaponID,
		&i.CharacterID,
		&i.Count,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserRoute = `-- name: DeleteUserRoute :exec
DELETE FROM user_routes
WHERE
    route_id = $1
`

func (q *Queries) DeleteUserRoute(ctx context.Context, routeID int32) error {
	_, err := q.db.Exec(ctx, deleteUserRoute, routeID)
	return err
}

const getUserRoute = `-- name: GetUserRoute :one
SELECT
    id, route_id, title, weapon_id, character_id, count, created_at, updated_at
FROM
    user_routes
WHERE
    route_id = $1
`

func (q *Queries) GetUserRoute(ctx context.Context, routeID int32) (UserRoute, error) {
	row := q.db.QueryRow(ctx, getUserRoute, routeID)
	var i UserRoute
	err := row.Scan(
		&i.ID,
		&i.RouteID,
		&i.Title,
		&i.WeaponID,
		&i.CharacterID,
		&i.Count,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCWRoutes = `-- name: ListCWRoutes :many
SELECT
    id, route_id, title, weapon_id, character_id, count, created_at, updated_at
FROM
    user_routes
WHERE
    character_id = $1
    AND weapon_id = $2
ORDER BY
    count DESC
LIMIT
    3
`

type ListCWRoutesParams struct {
	CharacterID int32 `json:"character_id"`
	WeaponID    int32 `json:"weapon_id"`
}

func (q *Queries) ListCWRoutes(ctx context.Context, arg ListCWRoutesParams) ([]UserRoute, error) {
	rows, err := q.db.Query(ctx, listCWRoutes, arg.CharacterID, arg.WeaponID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserRoute
	for rows.Next() {
		var i UserRoute
		if err := rows.Scan(
			&i.ID,
			&i.RouteID,
			&i.Title,
			&i.WeaponID,
			&i.CharacterID,
			&i.Count,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserRoutes = `-- name: ListUserRoutes :many
SELECT
    id, route_id, title, weapon_id, character_id, count, created_at, updated_at
FROM
    user_routes
ORDER BY
    route_id ASC
`

func (q *Queries) ListUserRoutes(ctx context.Context) ([]UserRoute, error) {
	rows, err := q.db.Query(ctx, listUserRoutes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserRoute
	for rows.Next() {
		var i UserRoute
		if err := rows.Scan(
			&i.ID,
			&i.RouteID,
			&i.Title,
			&i.WeaponID,
			&i.CharacterID,
			&i.Count,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const patchUserRoute = `-- name: PatchUserRoute :exec
UPDATE user_routes
SET
    weapon_id = $2,
    character_id = $3,
    title = $4,
    count = $5
WHERE
    route_id = $1
`

type PatchUserRouteParams struct {
	RouteID     int32  `json:"route_id"`
	WeaponID    int32  `json:"weapon_id"`
	CharacterID int32  `json:"character_id"`
	Title       string `json:"title"`
	Count       int32  `json:"count"`
}

func (q *Queries) PatchUserRoute(ctx context.Context, arg PatchUserRouteParams) error {
	_, err := q.db.Exec(ctx, patchUserRoute,
		arg.RouteID,
		arg.WeaponID,
		arg.CharacterID,
		arg.Title,
		arg.Count,
	)
	return err
}
