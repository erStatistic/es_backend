// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: position.sql

package database

import (
	"context"
)

const createPosition = `-- name: CreatePosition :one
INSERT INTO
    positions (name, image_url)
VALUES
    ($1, $2)
RETURNING
    id, name, image_url, created_at, updated_at
`

type CreatePositionParams struct {
	Name     string
	ImageUrl string
}

func (q *Queries) CreatePosition(ctx context.Context, arg CreatePositionParams) (Position, error) {
	row := q.db.QueryRowContext(ctx, createPosition, arg.Name, arg.ImageUrl)
	var i Position
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePosition = `-- name: DeletePosition :exec
DELETE FROM positions
WHERE
    id = $1
`

func (q *Queries) DeletePosition(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePosition, id)
	return err
}

const getPosition = `-- name: GetPosition :one
SELECT
    id, name, image_url, created_at, updated_at
FROM
    positions
WHERE
    id = $1
`

func (q *Queries) GetPosition(ctx context.Context, id int32) (Position, error) {
	row := q.db.QueryRowContext(ctx, getPosition, id)
	var i Position
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPositions = `-- name: ListPositions :many
SELECT
    id, name, image_url, created_at, updated_at
FROM
    positions
ORDER BY
    id ASC
`

func (q *Queries) ListPositions(ctx context.Context) ([]Position, error) {
	rows, err := q.db.QueryContext(ctx, listPositions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Position
	for rows.Next() {
		var i Position
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const patchPosition = `-- name: PatchPosition :exec
UPDATE positions
SET
    image_url = $2,
    name = $3
WHERE
    id = $1
`

type PatchPositionParams struct {
	ID       int32
	ImageUrl string
	Name     string
}

func (q *Queries) PatchPosition(ctx context.Context, arg PatchPositionParams) error {
	_, err := q.db.ExecContext(ctx, patchPosition, arg.ID, arg.ImageUrl, arg.Name)
	return err
}
