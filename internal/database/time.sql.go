// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: time.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTime = `-- name: CreateTime :one
INSERT INTO
    times (no, name, seconds, time_range)
VALUES
    ($1, $2, $3, $4)
RETURNING
    id, no, name, seconds, time_range, created_at, updated_at
`

type CreateTimeParams struct {
	No        int32                     `json:"no"`
	Name      string                    `json:"name"`
	Seconds   int32                     `json:"seconds"`
	TimeRange pgtype.Range[pgtype.Int4] `json:"time_range"`
}

func (q *Queries) CreateTime(ctx context.Context, arg CreateTimeParams) (Time, error) {
	row := q.db.QueryRow(ctx, createTime,
		arg.No,
		arg.Name,
		arg.Seconds,
		arg.TimeRange,
	)
	var i Time
	err := row.Scan(
		&i.ID,
		&i.No,
		&i.Name,
		&i.Seconds,
		&i.TimeRange,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTime = `-- name: DeleteTime :exec
DELETE FROM times
WHERE
    id = $1
`

func (q *Queries) DeleteTime(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTime, id)
	return err
}

const getTime = `-- name: GetTime :one
SELECT
    id, no, name, seconds, time_range, created_at, updated_at
FROM
    times
WHERE
    id = $1
`

func (q *Queries) GetTime(ctx context.Context, id int32) (Time, error) {
	row := q.db.QueryRow(ctx, getTime, id)
	var i Time
	err := row.Scan(
		&i.ID,
		&i.No,
		&i.Name,
		&i.Seconds,
		&i.TimeRange,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTimes = `-- name: ListTimes :many
SELECT
    id, no, name, seconds, time_range, created_at, updated_at
FROM
    times
ORDER BY
    id ASC
`

func (q *Queries) ListTimes(ctx context.Context) ([]Time, error) {
	rows, err := q.db.Query(ctx, listTimes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Time
	for rows.Next() {
		var i Time
		if err := rows.Scan(
			&i.ID,
			&i.No,
			&i.Name,
			&i.Seconds,
			&i.TimeRange,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const patchTime = `-- name: PatchTime :exec
UPDATE times
SET
    name = $2,
    seconds = $3,
    time_range = $4
WHERE
    id = $1
`

type PatchTimeParams struct {
	ID        int32                     `json:"id"`
	Name      string                    `json:"name"`
	Seconds   int32                     `json:"seconds"`
	TimeRange pgtype.Range[pgtype.Int4] `json:"time_range"`
}

func (q *Queries) PatchTime(ctx context.Context, arg PatchTimeParams) error {
	_, err := q.db.Exec(ctx, patchTime,
		arg.ID,
		arg.Name,
		arg.Seconds,
		arg.TimeRange,
	)
	return err
}
