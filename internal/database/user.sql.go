// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (id, user_num, name)
VALUES
    ($1, $2, $3)
RETURNING
	id, user_num, name
`

type CreateUserParams struct {
	ID      uuid.UUID
	UserNum int32
	Name    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.UserNum, arg.Name)
	var i User
	err := row.Scan(&i.ID, &i.UserNum, &i.Name)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
`

func (q *Queries) DeleteUser(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUser)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
    id, user_num, name
FROM
    users
WHERE
    name = $1
`

func (q *Queries) GetUser(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, name)
	var i User
	err := row.Scan(&i.ID, &i.UserNum, &i.Name)
	return i, err
}
