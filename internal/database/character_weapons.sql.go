// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: character_weapons.sql

package database

import (
	"context"
)

const createCharacterWeapon = `-- name: CreateCharacterWeapon :one
INSERT INTO
    character_weapons (character_id, weapon_id, position_id, cluster_id)
VALUES
    ($1, $2, $3, $4)
RETURNING
    id, character_id, weapon_id, position_id, cluster_id, created_at, updated_at
`

type CreateCharacterWeaponParams struct {
	CharacterID int32
	WeaponID    int32
	PositionID  int32
	ClusterID   int32
}

func (q *Queries) CreateCharacterWeapon(ctx context.Context, arg CreateCharacterWeaponParams) (CharacterWeapon, error) {
	row := q.db.QueryRowContext(ctx, createCharacterWeapon,
		arg.CharacterID,
		arg.WeaponID,
		arg.PositionID,
		arg.ClusterID,
	)
	var i CharacterWeapon
	err := row.Scan(
		&i.ID,
		&i.CharacterID,
		&i.WeaponID,
		&i.PositionID,
		&i.ClusterID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCharacterWeapon = `-- name: DeleteCharacterWeapon :exec
DELETE FROM character_weapons
WHERE
    character_id = $1
    AND weapon_id = $2
`

type DeleteCharacterWeaponParams struct {
	CharacterID int32
	WeaponID    int32
}

func (q *Queries) DeleteCharacterWeapon(ctx context.Context, arg DeleteCharacterWeaponParams) error {
	_, err := q.db.ExecContext(ctx, deleteCharacterWeapon, arg.CharacterID, arg.WeaponID)
	return err
}

const getCharacterWeapon = `-- name: GetCharacterWeapon :one
SELECT
    id, character_id, weapon_id, position_id, cluster_id, created_at, updated_at
FROM
    character_weapons
WHERE
    character_id = $1
    AND weapon_id = $2
`

type GetCharacterWeaponParams struct {
	CharacterID int32
	WeaponID    int32
}

func (q *Queries) GetCharacterWeapon(ctx context.Context, arg GetCharacterWeaponParams) (CharacterWeapon, error) {
	row := q.db.QueryRowContext(ctx, getCharacterWeapon, arg.CharacterID, arg.WeaponID)
	var i CharacterWeapon
	err := row.Scan(
		&i.ID,
		&i.CharacterID,
		&i.WeaponID,
		&i.PositionID,
		&i.ClusterID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCharacterWeapons = `-- name: ListCharacterWeapons :many
SELECT
    id, character_id, weapon_id, position_id, cluster_id, created_at, updated_at
FROM
    character_weapons
ORDER BY
    id ASC
`

func (q *Queries) ListCharacterWeapons(ctx context.Context) ([]CharacterWeapon, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterWeapons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CharacterWeapon
	for rows.Next() {
		var i CharacterWeapon
		if err := rows.Scan(
			&i.ID,
			&i.CharacterID,
			&i.WeaponID,
			&i.PositionID,
			&i.ClusterID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const patchCharacterWeapon = `-- name: PatchCharacterWeapon :exec
UPDATE character_weapons
SET
    position_id = $3,
    cluster_id = $4
WHERE
    character_id = $1
    AND weapon_id = $2
`

type PatchCharacterWeaponParams struct {
	CharacterID int32
	WeaponID    int32
	PositionID  int32
	ClusterID   int32
}

func (q *Queries) PatchCharacterWeapon(ctx context.Context, arg PatchCharacterWeaponParams) error {
	_, err := q.db.ExecContext(ctx, patchCharacterWeapon,
		arg.CharacterID,
		arg.WeaponID,
		arg.PositionID,
		arg.ClusterID,
	)
	return err
}
