// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: game_team.sql

package database

import (
	"context"
)

const createGameTeam = `-- name: CreateGameTeam :one
INSERT INTO
    game_teams (
        game_id,
        team_id,
        game_rank,
        team_kills,
        monster_credits,
        gained_mmr,
        team_avg_mmr,
        total_time
    )
VALUES
    ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING
    id, game_id, team_id, game_rank, team_kills, monster_credits, gained_mmr, team_avg_mmr, total_time, times_id, created_at, updated_at
`

type CreateGameTeamParams struct {
	GameID         int64 `json:"game_id"`
	TeamID         int32 `json:"team_id"`
	GameRank       int32 `json:"game_rank"`
	TeamKills      int32 `json:"team_kills"`
	MonsterCredits int32 `json:"monster_credits"`
	GainedMmr      int32 `json:"gained_mmr"`
	TeamAvgMmr     int32 `json:"team_avg_mmr"`
	TotalTime      int32 `json:"total_time"`
}

func (q *Queries) CreateGameTeam(ctx context.Context, arg CreateGameTeamParams) (GameTeam, error) {
	row := q.db.QueryRow(ctx, createGameTeam,
		arg.GameID,
		arg.TeamID,
		arg.GameRank,
		arg.TeamKills,
		arg.MonsterCredits,
		arg.GainedMmr,
		arg.TeamAvgMmr,
		arg.TotalTime,
	)
	var i GameTeam
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.TeamID,
		&i.GameRank,
		&i.TeamKills,
		&i.MonsterCredits,
		&i.GainedMmr,
		&i.TeamAvgMmr,
		&i.TotalTime,
		&i.TimesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGameTeam = `-- name: DeleteGameTeam :exec
DELETE FROM game_teams
WHERE
    id = $1
`

func (q *Queries) DeleteGameTeam(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteGameTeam, id)
	return err
}

const getGameTeam = `-- name: GetGameTeam :one
SELECT
    id, game_id, team_id, game_rank, team_kills, monster_credits, gained_mmr, team_avg_mmr, total_time, times_id, created_at, updated_at
FROM
    game_teams
WHERE
    game_id = $1
    AND team_id = $2
`

type GetGameTeamParams struct {
	GameID int64 `json:"game_id"`
	TeamID int32 `json:"team_id"`
}

func (q *Queries) GetGameTeam(ctx context.Context, arg GetGameTeamParams) (GameTeam, error) {
	row := q.db.QueryRow(ctx, getGameTeam, arg.GameID, arg.TeamID)
	var i GameTeam
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.TeamID,
		&i.GameRank,
		&i.TeamKills,
		&i.MonsterCredits,
		&i.GainedMmr,
		&i.TeamAvgMmr,
		&i.TotalTime,
		&i.TimesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGameTeamByGameID = `-- name: GetGameTeamByGameID :many
SELECT
    id, game_id, team_id, game_rank, team_kills, monster_credits, gained_mmr, team_avg_mmr, total_time, times_id, created_at, updated_at
FROM
    game_teams
WHERE
    game_id = $1
`

func (q *Queries) GetGameTeamByGameID(ctx context.Context, gameID int64) ([]GameTeam, error) {
	rows, err := q.db.Query(ctx, getGameTeamByGameID, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GameTeam
	for rows.Next() {
		var i GameTeam
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.TeamID,
			&i.GameRank,
			&i.TeamKills,
			&i.MonsterCredits,
			&i.GainedMmr,
			&i.TeamAvgMmr,
			&i.TotalTime,
			&i.TimesID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListGameTeamsByGameRank = `-- name: GetListGameTeamsByGameRank :many
SELECT
    id, game_id, team_id, game_rank, team_kills, monster_credits, gained_mmr, team_avg_mmr, total_time, times_id, created_at, updated_at
FROM
    game_teams
WHERE
    game_rank = $1
`

func (q *Queries) GetListGameTeamsByGameRank(ctx context.Context, gameRank int32) ([]GameTeam, error) {
	rows, err := q.db.Query(ctx, getListGameTeamsByGameRank, gameRank)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GameTeam
	for rows.Next() {
		var i GameTeam
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.TeamID,
			&i.GameRank,
			&i.TeamKills,
			&i.MonsterCredits,
			&i.GainedMmr,
			&i.TeamAvgMmr,
			&i.TotalTime,
			&i.TimesID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGameTeams = `-- name: ListGameTeams :many
SELECT
    id, game_id, team_id, game_rank, team_kills, monster_credits, gained_mmr, team_avg_mmr, total_time, times_id, created_at, updated_at
FROM
    game_teams
ORDER BY
    id ASC
`

func (q *Queries) ListGameTeams(ctx context.Context) ([]GameTeam, error) {
	rows, err := q.db.Query(ctx, listGameTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GameTeam
	for rows.Next() {
		var i GameTeam
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.TeamID,
			&i.GameRank,
			&i.TeamKills,
			&i.MonsterCredits,
			&i.GainedMmr,
			&i.TeamAvgMmr,
			&i.TotalTime,
			&i.TimesID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const patchGameTeam = `-- name: PatchGameTeam :exec
UPDATE game_teams
SET
    game_id = $2,
    team_id = $3,
    game_rank = $4,
    team_kills = $5,
    monster_credits = $6,
    gained_mmr = $7,
    team_avg_mmr = $8,
    total_time = $9
WHERE
    id = $1
`

type PatchGameTeamParams struct {
	ID             int32 `json:"id"`
	GameID         int64 `json:"game_id"`
	TeamID         int32 `json:"team_id"`
	GameRank       int32 `json:"game_rank"`
	TeamKills      int32 `json:"team_kills"`
	MonsterCredits int32 `json:"monster_credits"`
	GainedMmr      int32 `json:"gained_mmr"`
	TeamAvgMmr     int32 `json:"team_avg_mmr"`
	TotalTime      int32 `json:"total_time"`
}

func (q *Queries) PatchGameTeam(ctx context.Context, arg PatchGameTeamParams) error {
	_, err := q.db.Exec(ctx, patchGameTeam,
		arg.ID,
		arg.GameID,
		arg.TeamID,
		arg.GameRank,
		arg.TeamKills,
		arg.MonsterCredits,
		arg.GainedMmr,
		arg.TeamAvgMmr,
		arg.TotalTime,
	)
	return err
}

const truncateGameTeams = `-- name: TruncateGameTeams :exec
TRUNCATE TABLE game_teams
`

func (q *Queries) TruncateGameTeams(ctx context.Context) error {
	_, err := q.db.Exec(ctx, truncateGameTeams)
	return err
}
