// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cws_by_character.sql

package database

import (
	"context"
)

const listCwByCharacterID = `-- name: ListCwByCharacterID :many
SELECT
    cw.id AS cw_id,
    ch.id AS ch_id,
    ch.name_kr AS ch_name,
    ch.image_url_mini AS ch_img_mini,
    ch.image_url_full AS ch_img_full,
    w.code AS w_code,
    w.name_kr AS w_name,
    w.image_url AS w_img,
    p.id AS p_id,
    p.name AS p_name
FROM
    character_weapons cw
    JOIN characters ch ON ch.id = cw.character_id
    JOIN weapons w ON w.code = cw.weapon_id
    LEFT JOIN positions p ON p.id = cw.position_id
WHERE
    cw.character_id = $1
ORDER BY
    w.name_kr,
    cw.id
`

type ListCwByCharacterIDRow struct {
	CwID      int32   `json:"cw_id"`
	ChID      int32   `json:"ch_id"`
	ChName    string  `json:"ch_name"`
	ChImgMini string  `json:"ch_img_mini"`
	ChImgFull string  `json:"ch_img_full"`
	WCode     int32   `json:"w_code"`
	WName     string  `json:"w_name"`
	WImg      string  `json:"w_img"`
	PID       *int32  `json:"p_id"`
	PName     *string `json:"p_name"`
}

func (q *Queries) ListCwByCharacterID(ctx context.Context, characterID int32) ([]ListCwByCharacterIDRow, error) {
	rows, err := q.db.Query(ctx, listCwByCharacterID, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCwByCharacterIDRow
	for rows.Next() {
		var i ListCwByCharacterIDRow
		if err := rows.Scan(
			&i.CwID,
			&i.ChID,
			&i.ChName,
			&i.ChImgMini,
			&i.ChImgFull,
			&i.WCode,
			&i.WName,
			&i.WImg,
			&i.PID,
			&i.PName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWeaponsByCharacterID = `-- name: ListWeaponsByCharacterID :many
SELECT DISTINCT
    w.code AS code,
    w.name_kr AS name,
    w.image_url AS image_url
FROM
    character_weapons cw
    JOIN weapons w ON w.code = cw.weapon_id
WHERE
    cw.character_id = $1
ORDER BY
    w.name_kr
`

type ListWeaponsByCharacterIDRow struct {
	Code     int32  `json:"code"`
	Name     string `json:"name"`
	ImageUrl string `json:"image_url"`
}

func (q *Queries) ListWeaponsByCharacterID(ctx context.Context, characterID int32) ([]ListWeaponsByCharacterIDRow, error) {
	rows, err := q.db.Query(ctx, listWeaponsByCharacterID, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListWeaponsByCharacterIDRow
	for rows.Next() {
		var i ListWeaponsByCharacterIDRow
		if err := rows.Scan(&i.Code, &i.Name, &i.ImageUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
