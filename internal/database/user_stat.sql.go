// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_stat.sql

package database

import (
	"context"
)

const createUserStat = `-- name: CreateUserStat :one
INSERT INTO
    user_stats (user_id, character_id)
VALUES
    ($1, $2)
RETURNING
    id, user_id, character_id, created_at, updated_at
`

type CreateUserStatParams struct {
	UserID      int32 `json:"user_id"`
	CharacterID int32 `json:"character_id"`
}

func (q *Queries) CreateUserStat(ctx context.Context, arg CreateUserStatParams) (UserStat, error) {
	row := q.db.QueryRow(ctx, createUserStat, arg.UserID, arg.CharacterID)
	var i UserStat
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CharacterID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserStat = `-- name: DeleteUserStat :exec
DELETE FROM user_stats
WHERE
    user_id = $1
`

func (q *Queries) DeleteUserStat(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUserStat, userID)
	return err
}

const getUserStat = `-- name: GetUserStat :one
SELECT
    id, user_id, character_id, created_at, updated_at
FROM
    user_stats
WHERE
    id = $1
`

func (q *Queries) GetUserStat(ctx context.Context, id int32) (UserStat, error) {
	row := q.db.QueryRow(ctx, getUserStat, id)
	var i UserStat
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CharacterID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserStatbyUserId = `-- name: GetUserStatbyUserId :many
SELECT
    id, user_id, character_id, created_at, updated_at
FROM
    user_stats
WHERE
    user_id = $1
`

func (q *Queries) GetUserStatbyUserId(ctx context.Context, userID int32) ([]UserStat, error) {
	rows, err := q.db.Query(ctx, getUserStatbyUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserStat
	for rows.Next() {
		var i UserStat
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CharacterID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserStat = `-- name: ListUserStat :many
SELECT
    id, user_id, character_id, created_at, updated_at
FROM
    user_stats
`

func (q *Queries) ListUserStat(ctx context.Context) ([]UserStat, error) {
	rows, err := q.db.Query(ctx, listUserStat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserStat
	for rows.Next() {
		var i UserStat
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CharacterID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const patchUserStat = `-- name: PatchUserStat :exec
UPDATE user_stats
SET
    user_id = $1,
    character_id = $2
WHERE
    id = $1
`

type PatchUserStatParams struct {
	UserID      int32 `json:"user_id"`
	CharacterID int32 `json:"character_id"`
}

func (q *Queries) PatchUserStat(ctx context.Context, arg PatchUserStatParams) error {
	_, err := q.db.Exec(ctx, patchUserStat, arg.UserID, arg.CharacterID)
	return err
}
