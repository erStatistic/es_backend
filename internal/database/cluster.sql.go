// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cluster.sql

package database

import (
	"context"
)

const createCluster = `-- name: CreateCluster :one
INSERT INTO
    clusters (name, image_url)
VALUES
    ($1, $2)
RETURNING
    id, name, image_url, created_at, updated_at
`

type CreateClusterParams struct {
	Name     string `json:"name"`
	ImageUrl string `json:"image_url"`
}

func (q *Queries) CreateCluster(ctx context.Context, arg CreateClusterParams) (Cluster, error) {
	row := q.db.QueryRow(ctx, createCluster, arg.Name, arg.ImageUrl)
	var i Cluster
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCluster = `-- name: DeleteCluster :exec
DELETE FROM clusters
WHERE
    id = $1
`

func (q *Queries) DeleteCluster(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCluster, id)
	return err
}

const getCluster = `-- name: GetCluster :one
SELECT
    id, name, image_url, created_at, updated_at
FROM
    clusters
WHERE
    id = $1
`

func (q *Queries) GetCluster(ctx context.Context, id int32) (Cluster, error) {
	row := q.db.QueryRow(ctx, getCluster, id)
	var i Cluster
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listClusters = `-- name: ListClusters :many
SELECT
    id, name, image_url, created_at, updated_at
FROM
    clusters
ORDER BY
    id ASC
`

func (q *Queries) ListClusters(ctx context.Context) ([]Cluster, error) {
	rows, err := q.db.Query(ctx, listClusters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cluster
	for rows.Next() {
		var i Cluster
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const patchCluster = `-- name: PatchCluster :exec
UPDATE clusters
SET
    image_url = $2,
    name = $3
WHERE
    id = $1
`

type PatchClusterParams struct {
	ID       int32  `json:"id"`
	ImageUrl string `json:"image_url"`
	Name     string `json:"name"`
}

func (q *Queries) PatchCluster(ctx context.Context, arg PatchClusterParams) error {
	_, err := q.db.Exec(ctx, patchCluster, arg.ID, arg.ImageUrl, arg.Name)
	return err
}
