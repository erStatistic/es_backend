// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tier.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTier = `-- name: CreateTier :one
INSERT INTO
    tiers (image_url, name, mmr_range, rank)
VALUES
    ($1, $2, $3, $4)
RETURNING
    id, image_url, name, rank, mmr_range, created_at, updated_at
`

type CreateTierParams struct {
	ImageUrl string                    `json:"image_url"`
	Name     string                    `json:"name"`
	MmrRange pgtype.Range[pgtype.Int4] `json:"mmr_range"`
	Rank     int32                     `json:"rank"`
}

func (q *Queries) CreateTier(ctx context.Context, arg CreateTierParams) (Tier, error) {
	row := q.db.QueryRow(ctx, createTier,
		arg.ImageUrl,
		arg.Name,
		arg.MmrRange,
		arg.Rank,
	)
	var i Tier
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Name,
		&i.Rank,
		&i.MmrRange,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTier = `-- name: DeleteTier :exec
DELETE FROM tiers
WHERE
    id = $1
`

func (q *Queries) DeleteTier(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTier, id)
	return err
}

const getTier = `-- name: GetTier :one
SELECT
    id, image_url, name, rank, mmr_range, created_at, updated_at
FROM
    tiers
WHERE
    id = $1
`

func (q *Queries) GetTier(ctx context.Context, id int32) (Tier, error) {
	row := q.db.QueryRow(ctx, getTier, id)
	var i Tier
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Name,
		&i.Rank,
		&i.MmrRange,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTiers = `-- name: ListTiers :many
SELECT
    id, image_url, name, rank, mmr_range, created_at, updated_at
FROM
    tiers
ORDER BY
    id ASC
`

func (q *Queries) ListTiers(ctx context.Context) ([]Tier, error) {
	rows, err := q.db.Query(ctx, listTiers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tier
	for rows.Next() {
		var i Tier
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Name,
			&i.Rank,
			&i.MmrRange,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const patchTier = `-- name: PatchTier :exec
UPDATE tiers
SET
    image_url = $2,
    name = $3,
    mmr_range = $4,
    rank = $5
WHERE
    id = $1
`

type PatchTierParams struct {
	ID       int32                     `json:"id"`
	ImageUrl string                    `json:"image_url"`
	Name     string                    `json:"name"`
	MmrRange pgtype.Range[pgtype.Int4] `json:"mmr_range"`
	Rank     int32                     `json:"rank"`
}

func (q *Queries) PatchTier(ctx context.Context, arg PatchTierParams) error {
	_, err := q.db.Exec(ctx, patchTier,
		arg.ID,
		arg.ImageUrl,
		arg.Name,
		arg.MmrRange,
		arg.Rank,
	)
	return err
}
