// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: character.sql

package database

import (
	"context"
)

const createCharacter = `-- name: CreateCharacter :one
INSERT INTO
    characters (code, image_url, name_kr)
VALUES
    ($1, $2, $3)
RETURNING
    id, code, name_kr, image_url, created_at, updated_at
`

type CreateCharacterParams struct {
	Code     int32
	ImageUrl string
	NameKr   string
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, createCharacter, arg.Code, arg.ImageUrl, arg.NameKr)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.NameKr,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCharacter = `-- name: DeleteCharacter :exec
DELETE FROM characters
WHERE
    code = $1
`

func (q *Queries) DeleteCharacter(ctx context.Context, code int32) error {
	_, err := q.db.ExecContext(ctx, deleteCharacter, code)
	return err
}

const getCharacter = `-- name: GetCharacter :one
SELECT
    id, code, name_kr, image_url, created_at, updated_at
FROM
    characters
WHERE
    code = $1
`

func (q *Queries) GetCharacter(ctx context.Context, code int32) (Character, error) {
	row := q.db.QueryRowContext(ctx, getCharacter, code)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.NameKr,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCharacters = `-- name: ListCharacters :many
SELECT
    id, code, name_kr, image_url, created_at, updated_at
FROM
    characters
ORDER BY
    code ASC
`

func (q *Queries) ListCharacters(ctx context.Context) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, listCharacters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.NameKr,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const patchCharacter = `-- name: PatchCharacter :exec
UPDATE characters
SET
    image_url = $2,
    name_kr = $3
WHERE
    code = $1
`

type PatchCharacterParams struct {
	Code     int32
	ImageUrl string
	NameKr   string
}

func (q *Queries) PatchCharacter(ctx context.Context, arg PatchCharacterParams) error {
	_, err := q.db.ExecContext(ctx, patchCharacter, arg.Code, arg.ImageUrl, arg.NameKr)
	return err
}
