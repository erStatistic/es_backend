// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: character.sql

package database

import (
	"context"
	"database/sql"
)

const createCharacter = `-- name: CreateCharacter :one
INSERT INTO
    characters (
        id,
        imageUrl,
        name_kr,
        name_en,
        updated_at,
        created_at
    )
VALUES
    ($1, $2, $3, $4, NOW(), NOW())
RETURNING
    id, imageurl, name_kr, name_en, updated_at, created_at
`

type CreateCharacterParams struct {
	ID       int32
	Imageurl sql.NullString
	NameKr   string
	NameEn   string
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, createCharacter,
		arg.ID,
		arg.Imageurl,
		arg.NameKr,
		arg.NameEn,
	)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Imageurl,
		&i.NameKr,
		&i.NameEn,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCharacterById = `-- name: DeleteCharacterById :exec
DELETE FROM characters
WHERE
    id = $1
`

func (q *Queries) DeleteCharacterById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCharacterById, id)
	return err
}

const deleteCharacterByName = `-- name: DeleteCharacterByName :exec
DELETE FROM characters
WHERE
    name_KR = $1
`

func (q *Queries) DeleteCharacterByName(ctx context.Context, nameKr string) error {
	_, err := q.db.ExecContext(ctx, deleteCharacterByName, nameKr)
	return err
}

const getCharacter = `-- name: GetCharacter :one
SELECT
    id, imageurl, name_kr, name_en, updated_at, created_at
FROM
    characters
WHERE
    name_KR = $1
`

func (q *Queries) GetCharacter(ctx context.Context, nameKr string) (Character, error) {
	row := q.db.QueryRowContext(ctx, getCharacter, nameKr)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Imageurl,
		&i.NameKr,
		&i.NameEn,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
