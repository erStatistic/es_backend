// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: character_weapon_stat.sql

package database

import (
	"context"
)

const createCharacterWeaponStat = `-- name: CreateCharacterWeaponStat :one
INSERT INTO
    character_weapon_stats (cw_id, atk, def, cc, spd, sup)
VALUES
    ($1, $2, $3, $4, $5, $6)
RETURNING
    cw_id, atk, def, cc, spd, sup, created_at, updated_at
`

type CreateCharacterWeaponStatParams struct {
	CwID int32
	Atk  int32
	Def  int32
	Cc   int32
	Spd  int32
	Sup  int32
}

func (q *Queries) CreateCharacterWeaponStat(ctx context.Context, arg CreateCharacterWeaponStatParams) (CharacterWeaponStat, error) {
	row := q.db.QueryRowContext(ctx, createCharacterWeaponStat,
		arg.CwID,
		arg.Atk,
		arg.Def,
		arg.Cc,
		arg.Spd,
		arg.Sup,
	)
	var i CharacterWeaponStat
	err := row.Scan(
		&i.CwID,
		&i.Atk,
		&i.Def,
		&i.Cc,
		&i.Spd,
		&i.Sup,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCharacterWeaponStat = `-- name: DeleteCharacterWeaponStat :exec
DELETE FROM character_weapon_stats
WHERE
    cw_id = $1
`

func (q *Queries) DeleteCharacterWeaponStat(ctx context.Context, cwID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCharacterWeaponStat, cwID)
	return err
}

const getCharacterWeaponStat = `-- name: GetCharacterWeaponStat :one
SELECT
    cw_id, atk, def, cc, spd, sup, created_at, updated_at
FROM
    character_weapon_stats
WHERE
    cw_id = $1
`

func (q *Queries) GetCharacterWeaponStat(ctx context.Context, cwID int32) (CharacterWeaponStat, error) {
	row := q.db.QueryRowContext(ctx, getCharacterWeaponStat, cwID)
	var i CharacterWeaponStat
	err := row.Scan(
		&i.CwID,
		&i.Atk,
		&i.Def,
		&i.Cc,
		&i.Spd,
		&i.Sup,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCharacterWeaponStats = `-- name: ListCharacterWeaponStats :many
SELECT
    cw_id, atk, def, cc, spd, sup, created_at, updated_at
FROM
    character_weapon_stats
ORDER BY
    cw_id ASC
`

func (q *Queries) ListCharacterWeaponStats(ctx context.Context) ([]CharacterWeaponStat, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterWeaponStats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CharacterWeaponStat
	for rows.Next() {
		var i CharacterWeaponStat
		if err := rows.Scan(
			&i.CwID,
			&i.Atk,
			&i.Def,
			&i.Cc,
			&i.Spd,
			&i.Sup,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const patchCharacterWeaponStat = `-- name: PatchCharacterWeaponStat :exec
UPDATE character_weapon_stats
SET
    atk = $2,
    def = $3,
    cc = $4,
    spd = $5,
    sup = $6
WHERE
    cw_id = $1
`

type PatchCharacterWeaponStatParams struct {
	CwID int32
	Atk  int32
	Def  int32
	Cc   int32
	Spd  int32
	Sup  int32
}

func (q *Queries) PatchCharacterWeaponStat(ctx context.Context, arg PatchCharacterWeaponStatParams) error {
	_, err := q.db.ExecContext(ctx, patchCharacterWeaponStat,
		arg.CwID,
		arg.Atk,
		arg.Def,
		arg.Cc,
		arg.Spd,
		arg.Sup,
	)
	return err
}
