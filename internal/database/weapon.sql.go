// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: weapon.sql

package database

import (
	"context"
)

const createWeapon = `-- name: CreateWeapon :one
INSERT INTO
    weapons (code, name_kr, image_url)
VALUES
    ($1, $2, $3)
RETURNING
    id, code, name_kr, image_url, created_at, updated_at
`

type CreateWeaponParams struct {
	Code     int32
	NameKr   string
	ImageUrl string
}

func (q *Queries) CreateWeapon(ctx context.Context, arg CreateWeaponParams) (Weapon, error) {
	row := q.db.QueryRowContext(ctx, createWeapon, arg.Code, arg.NameKr, arg.ImageUrl)
	var i Weapon
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.NameKr,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWeapon = `-- name: DeleteWeapon :exec
DELETE FROM weapons
WHERE
    code = $1
`

func (q *Queries) DeleteWeapon(ctx context.Context, code int32) error {
	_, err := q.db.ExecContext(ctx, deleteWeapon, code)
	return err
}

const getWeapon = `-- name: GetWeapon :one
SELECT
    id, code, name_kr, image_url, created_at, updated_at
FROM
    weapons
WHERE
    code = $1
`

func (q *Queries) GetWeapon(ctx context.Context, code int32) (Weapon, error) {
	row := q.db.QueryRowContext(ctx, getWeapon, code)
	var i Weapon
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.NameKr,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listWeapons = `-- name: ListWeapons :many
SELECT
    id, code, name_kr, image_url, created_at, updated_at
FROM
    weapons
ORDER BY
    code ASC
`

func (q *Queries) ListWeapons(ctx context.Context) ([]Weapon, error) {
	rows, err := q.db.QueryContext(ctx, listWeapons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Weapon
	for rows.Next() {
		var i Weapon
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.NameKr,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const patchWeapon = `-- name: PatchWeapon :exec
UPDATE weapons
SET
    image_url = $2,
    name_kr = $3
WHERE
    code = $1
`

type PatchWeaponParams struct {
	Code     int32
	ImageUrl string
	NameKr   string
}

func (q *Queries) PatchWeapon(ctx context.Context, arg PatchWeaponParams) error {
	_, err := q.db.ExecContext(ctx, patchWeapon, arg.Code, arg.ImageUrl, arg.NameKr)
	return err
}
