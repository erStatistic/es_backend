// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: game_team_cws.sql

package database

import (
	"context"
)

const createGameTeamCW = `-- name: CreateGameTeamCW :one
INSERT INTO
    game_team_cws (game_team_id, cw_id, mmr)
VALUES
    ($1, $2, $3)
RETURNING
    id, game_team_id, cw_id, mmr, created_at, updated_at
`

type CreateGameTeamCWParams struct {
	GameTeamID int32 `json:"game_team_id"`
	CwID       int32 `json:"cw_id"`
	Mmr        int32 `json:"mmr"`
}

func (q *Queries) CreateGameTeamCW(ctx context.Context, arg CreateGameTeamCWParams) (GameTeamCw, error) {
	row := q.db.QueryRow(ctx, createGameTeamCW, arg.GameTeamID, arg.CwID, arg.Mmr)
	var i GameTeamCw
	err := row.Scan(
		&i.ID,
		&i.GameTeamID,
		&i.CwID,
		&i.Mmr,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGameTeamCW = `-- name: DeleteGameTeamCW :exec
DELETE FROM game_team_cws
WHERE
    id = $1
`

func (q *Queries) DeleteGameTeamCW(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteGameTeamCW, id)
	return err
}

const getGameTeamCW = `-- name: GetGameTeamCW :one
SELECT
    id, game_team_id, cw_id, mmr, created_at, updated_at
FROM
    game_team_cws
WHERE
    id = $1
`

func (q *Queries) GetGameTeamCW(ctx context.Context, id int32) (GameTeamCw, error) {
	row := q.db.QueryRow(ctx, getGameTeamCW, id)
	var i GameTeamCw
	err := row.Scan(
		&i.ID,
		&i.GameTeamID,
		&i.CwID,
		&i.Mmr,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listGameSameTeamCWs = `-- name: ListGameSameTeamCWs :many
SELECT
    id, game_team_id, cw_id, mmr, created_at, updated_at
FROM
    game_team_cws
WHERE
    game_team_id = $1
`

func (q *Queries) ListGameSameTeamCWs(ctx context.Context, gameTeamID int32) ([]GameTeamCw, error) {
	rows, err := q.db.Query(ctx, listGameSameTeamCWs, gameTeamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GameTeamCw
	for rows.Next() {
		var i GameTeamCw
		if err := rows.Scan(
			&i.ID,
			&i.GameTeamID,
			&i.CwID,
			&i.Mmr,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGameTeamCWs = `-- name: ListGameTeamCWs :many
SELECT
    id, game_team_id, cw_id, mmr, created_at, updated_at
FROM
    game_team_cws
ORDER BY
    id
`

func (q *Queries) ListGameTeamCWs(ctx context.Context) ([]GameTeamCw, error) {
	rows, err := q.db.Query(ctx, listGameTeamCWs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GameTeamCw
	for rows.Next() {
		var i GameTeamCw
		if err := rows.Scan(
			&i.ID,
			&i.GameTeamID,
			&i.CwID,
			&i.Mmr,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const patchGameTeamCW = `-- name: PatchGameTeamCW :exec
UPDATE game_team_cws
SET
    game_team_id = $1,
    cw_id = $2,
    mmr = $3
WHERE
    id = $1
`

type PatchGameTeamCWParams struct {
	GameTeamID int32 `json:"game_team_id"`
	CwID       int32 `json:"cw_id"`
	Mmr        int32 `json:"mmr"`
}

func (q *Queries) PatchGameTeamCW(ctx context.Context, arg PatchGameTeamCWParams) error {
	_, err := q.db.Exec(ctx, patchGameTeamCW, arg.GameTeamID, arg.CwID, arg.Mmr)
	return err
}

const truncateGameTeamCWs = `-- name: TruncateGameTeamCWs :exec
TRUNCATE TABLE game_team_cws
`

func (q *Queries) TruncateGameTeamCWs(ctx context.Context) error {
	_, err := q.db.Exec(ctx, truncateGameTeamCWs)
	return err
}
