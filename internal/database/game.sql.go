// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: game.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGame = `-- name: CreateGame :one
INSERT INTO
    games (game_code, average_mmr)
VALUES
    ($1, $2)
RETURNING
    id, game_code, started_at, average_mmr, created_at, updated_at
`

type CreateGameParams struct {
	GameCode   int64 `json:"game_code"`
	AverageMmr int32 `json:"average_mmr"`
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (Game, error) {
	row := q.db.QueryRow(ctx, createGame, arg.GameCode, arg.AverageMmr)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.GameCode,
		&i.StartedAt,
		&i.AverageMmr,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGame = `-- name: DeleteGame :exec
DELETE FROM games
WHERE
    game_code = $1
`

func (q *Queries) DeleteGame(ctx context.Context, gameCode int64) error {
	_, err := q.db.Exec(ctx, deleteGame, gameCode)
	return err
}

const getGame = `-- name: GetGame :one
SELECT
    id, game_code, started_at, average_mmr, created_at, updated_at
FROM
    games
WHERE
    game_code = $1
`

func (q *Queries) GetGame(ctx context.Context, gameCode int64) (Game, error) {
	row := q.db.QueryRow(ctx, getGame, gameCode)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.GameCode,
		&i.StartedAt,
		&i.AverageMmr,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listGames = `-- name: ListGames :many
SELECT
    id, game_code, started_at, average_mmr, created_at, updated_at
FROM
    games
ORDER BY
    started_at DESC
`

func (q *Queries) ListGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.Query(ctx, listGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.GameCode,
			&i.StartedAt,
			&i.AverageMmr,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const patchGame = `-- name: PatchGame :exec
UPDATE games
SET
    average_mmr = $3,
    started_at = $2
WHERE
    game_code = $1
`

type PatchGameParams struct {
	GameCode   int64              `json:"game_code"`
	StartedAt  pgtype.Timestamptz `json:"started_at"`
	AverageMmr int32              `json:"average_mmr"`
}

func (q *Queries) PatchGame(ctx context.Context, arg PatchGameParams) error {
	_, err := q.db.Exec(ctx, patchGame, arg.GameCode, arg.StartedAt, arg.AverageMmr)
	return err
}
